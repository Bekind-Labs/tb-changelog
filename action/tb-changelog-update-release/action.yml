name: 'tb-changelog-update-release'
description: 'Auto-generate changelogs by combining git history with TrackerBoot story details for GitHub releases'

inputs:
  tb-api-key:
    description: 'TrackerBoot API key'
    required: true
  tb-project-id:
    description: 'TrackerBoot project ID'
    required: true
  format:
    description: 'Output format (github, github-light, slack-payload)'
    required: false
    default: 'github'
  no-signature:
    description: 'Disable signature in output'
    required: false
    default: 'false'
  slack-bot-token:
    description: 'Slack Bot Token for posting release notifications (optional)'
    required: false
  slack-channel:
    description: 'Slack channel to post notifications (e.g., #releases or @user) (optional)'
    required: false
  slack-color:
    description: 'Color for Slack message attachment (hex color code, e.g., #10b981)'
    required: false
    default: '#10b981'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install tb-changelog
      shell: bash
      run: npm install -g tb-changelog@latest

    - name: Detect version range
      id: detect-versions
      shell: bash
      run: |
        FROM_TAG=$(gh release list \
          --exclude-drafts --exclude-pre-releases \
          --limit 1 --order desc \
          --json tagName --jq '.[0].tagName')

        if [ -z "$FROM_TAG" ]; then
          echo "::error::No previous releases found. Please create at least one release before using this action."
          echo "To create your first release:"
          echo "1. Go to https://github.com/${{ github.repository }}/releases/new"
          echo "2. Create a release with a tag (e.g., v0.1.0)"
          echo "3. Then this action will work for subsequent releases"
          exit 1
        fi

        if [ "${{ github.event_name }}" == "release" ]; then
          # For release events, use the release tag
          TO_TAG="${{ github.event.release.tag_name }}"
        else
          # For all other cases, use HEAD (current commit)
          TO_TAG="HEAD"
        fi

        echo "from=$FROM_TAG" >> $GITHUB_OUTPUT
        echo "to=$TO_TAG" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Generate changelog for GitHub
      shell: bash
      run: |
        tb-changelog \
          --from "${{ steps.detect-versions.outputs.from }}" \
          --to "${{ steps.detect-versions.outputs.to }}" \
          --format "${{ inputs.format }}" \
          $( [ "${{ inputs.no-signature }}" = "true" ] && echo "--no-signature" || echo "" ) \
          --use-cache \
          --output /tmp/changelog.md
      env:
        TB_API_KEY: ${{ inputs.tb-api-key }}
        TB_PROJECT_ID: ${{ inputs.tb-project-id }}

    - name: Update GitHub Release
      if: github.event_name == 'release'
      shell: bash
      run: |
        gh release \
          edit "${{ github.event.release.tag_name }}" \
          --notes-file /tmp/changelog.md

        echo "âœ… Updated release with changelog"
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Generate changelog for Slack
      if: github.event_name == 'release' && inputs.slack-bot-token != '' && inputs.slack-channel != ''
      shell: bash
      run: |
        tb-changelog \
          --from "${{ steps.detect-versions.outputs.from }}" \
          --to "${{ steps.detect-versions.outputs.to }}" \
          --format "slack-payload" \
          $( [ "${{ inputs.no-signature }}" = "true" ] && echo "--no-signature" || echo "" ) \
          --use-cache \
          --output /tmp/slack-payload.json
      env:
        TB_API_KEY: ${{ inputs.tb-api-key }}
        TB_PROJECT_ID: ${{ inputs.tb-project-id }}

    - name: Post to Slack
      if: github.event_name == 'release' && inputs.slack-bot-token != '' && inputs.slack-channel != ''
      shell: bash
      run: |
        if [ "${{ github.event.release.prerelease }}" = "true" ]; then
          EMOJI="ðŸŽ¯"
          RELEASE_TYPE="Pre-release"
        else
          EMOJI="ðŸš€"
          RELEASE_TYPE="Release"
        fi

        # Get release information
        COLOR="${{ inputs.slack-color }}"
        RELEASE_URL="${{ github.event.release.html_url }}"
        TAG_NAME="${{ github.event.release.tag_name }}"
        REPO_NAME="${{ github.repository }}"
        CHANNEL="${{ inputs.slack-channel }}"

        # Replace placeholders in the generated JSON
        sed -i \
          -e "s|<your-channel>|$CHANNEL|g" \
          -e "s|<your-color>|$COLOR|g" \
          -e "s|<your-title>|$EMOJI $RELEASE_TYPE created: $TAG_NAME|g" \
          -e "s|<your-release-url>|$RELEASE_URL|g" \
          /tmp/slack-payload.json

        curl -X POST \
          -H "Authorization: Bearer ${{ inputs.slack-bot-token }}" \
          -H "Content-Type: application/json" \
          -d @/tmp/slack-payload.json \
          https://slack.com/api/chat.postMessage

        echo "âœ… Posted release notification to Slack with Block Kit"
      env:
        TB_API_KEY: ${{ inputs.tb-api-key }}
        TB_PROJECT_ID: ${{ inputs.tb-project-id }}
