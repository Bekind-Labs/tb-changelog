import type { Story } from "../../types";
import type { OutputGeneratorParameters } from "../generate-output";
import { generateUrl, getStoryIcon } from "./utils";

const BlockType = { PlainText: "plain_text", Markdown: "mrkdwn" } as const;
const DIVIDER_BLOCK = { type: "divider" };
const NO_STORY_BLOCK = (text: string) => ({ type: "section", text: { type: BlockType.PlainText, text } });
const SPACER_BLOCK = { type: "section", text: { type: BlockType.PlainText, text: " " } };

export const generateSlackPayload = ({
  projectId,
  categorizedStories: {
    acceptedStories,
    needsAttentionStories,
    notFinishedStories,
    chores,
    nonStoryCommits,
    totalCommits,
  },
  includeSignature,
}: OutputGeneratorParameters): string => {
  const blocks: object[] = [
    { type: "header", text: { type: BlockType.PlainText, text: "<your-title>" } },
    {
      type: "context",
      elements: [
        { type: BlockType.Markdown, text: `üì¶ *${totalCommits} commits* included` },
        { type: BlockType.Markdown, text: `‚úÖ *${acceptedStories.length} stories* delivered` },
        {
          type: BlockType.Markdown,
          text: `üö® *${needsAttentionStories.length} stories* needing attention`,
        },
        { type: BlockType.Markdown, text: `üöß *${notFinishedStories.length} stories* unfinished` },
        { type: BlockType.Markdown, text: `üõ†Ô∏è *${chores.length} chores* included` },
      ],
    },
    { type: "context", elements: [{ type: BlockType.Markdown, text: "View details on GitHub: <your-release-url>" }] },
    DIVIDER_BLOCK,
  ];

  blocks.push(...generateStorySectionBlock({ projectId, title: `‚úÖ *Accepted Stories*`, stories: acceptedStories }));

  blocks.push(
    ...generateStorySectionBlock({
      projectId,
      title: `üö® *Needs Attention*`,
      stories: needsAttentionStories,
      warningText: "These stories show *mismatches*: finish commits and story status do not align.",
    }),
  );

  blocks.push(
    ...generateStorySectionBlock({
      projectId,
      title: `üöß *Not Finished Stories*`,
      stories: notFinishedStories,
      warningText: "These stories are *not completed*: no finish commit and not accepted.",
    }),
  );

  blocks.push(...generateStorySectionBlock({ projectId, title: `üõ†Ô∏è *Chores*`, stories: chores, isChore: true }));

  blocks.push({
    type: "section",
    text: { type: BlockType.Markdown, text: `üîç *Non-story Commits* (${nonStoryCommits.length})` },
  });

  if (nonStoryCommits.length > 0) {
    blocks.push({
      type: "rich_text",
      elements: [
        {
          type: "rich_text_list",
          style: "bullet",
          indent: 0,
          border: 0,
          elements: nonStoryCommits.map((commit) => ({
            type: "rich_text_section",
            elements: [{ type: "text", text: commit.message }],
          })),
        },
      ],
    });
  } else {
    blocks.push(NO_STORY_BLOCK("No commits."));
  }
  blocks.push(SPACER_BLOCK, DIVIDER_BLOCK);

  if (includeSignature) {
    blocks.push({
      type: "context",
      elements: [
        { type: BlockType.Markdown, text: "_Generated by <https://github.com/Bekind-Labs/tb-changelog|tb-changelog>_" },
      ],
    });
  }

  const payload = { channel: "<your-channel>", attachments: [{ color: "<your-color>", blocks }] };
  return JSON.stringify(payload, null, 2);
};

const generateStorySectionBlock = ({
  projectId,
  title,
  stories,
  warningText = undefined,
  isChore = false,
}: {
  projectId: string;
  title: string;
  stories: Story[];
  warningText?: string;
  isChore?: boolean;
}): object[] => {
  const blocks: object[] = [
    { type: "section", text: { type: BlockType.Markdown, text: `${title} (${stories.length})` } },
  ];

  if (stories.length === 0) {
    return [...blocks, NO_STORY_BLOCK(isChore ? "No chores." : "No stories."), SPACER_BLOCK, DIVIDER_BLOCK];
  }

  if (warningText) {
    blocks.push({ type: "context", elements: [{ type: BlockType.Markdown, text: warningText }] });
  }

  blocks.push({
    type: "rich_text",
    elements: [
      {
        type: "rich_text_list",
        style: "bullet",
        indent: 0,
        border: 0,
        elements: stories.map((story) => {
          return story.storyType === "Chore"
            ? {
                type: "rich_text_section",
                elements: [
                  { type: "link", url: generateUrl(projectId, story.id), text: story.title },
                  ...(story.status !== "Accepted" ? [{ type: "text", text: " (Not finished)" }] : []),
                ],
              }
            : {
                type: "rich_text_section",
                elements: [
                  { type: "text", text: `${getStoryIcon(story.storyType)} ` },
                  { type: "link", url: generateUrl(projectId, story.id), text: story.title },
                ],
              };
        }),
      },
    ],
  });

  return [...blocks, SPACER_BLOCK, DIVIDER_BLOCK];
};
