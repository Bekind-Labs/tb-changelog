import type { GitCommit, Story } from "../../types";
import type { OutputGeneratorParameters } from "../generate-output";
import { createUrl, getStoryIcon } from "./utils";

const SPACER = "<br />";

export const generateGithubMarkdown = ({ projectId, ...args }: OutputGeneratorParameters, isLight: boolean): string => {
  return `
> [!NOTE]
> 📦 ${args.totalCommits} commits included, ✅ ${args.acceptedStories.length} stories delivered,
> 🚨 ${args.needsAttentionStories.length} stories needing attention, 🚧 ${args.notFinishedStories.length} stories unfinished, 🛠️ ${args.chores.length} chores included

${generateFromStories({
  projectId,
  title: `✅ Accepted Stories`,
  stories: args.acceptedStories,
  isLight,
})}

${generateFromStories({
  projectId,
  title: `🚨 Needs Attention`,
  stories: args.needsAttentionStories,
  warningText: `
> [!WARNING]
> These stories show **mismatches**: finish commits and stort status do not align.  
> Please review and resolve before release.
`.trim(),
  isLight,
})}

${generateFromStories({
  projectId,
  title: `🚧 Not Finished Stories`,
  stories: args.notFinishedStories,
  warningText: `
> [!CAUTION]
> These stories are **not completed**: no finish commit and not accepted.  
> Please confirm whether they can be released as-is.
`.trim(),
  isLight,
})}

${generateFromStories({
  projectId,
  title: `🛠️ Chores`,
  stories: args.chores,
  isLight,
})}

## 🔍 Non-story Commits (${args.nonStoryCommits.length})
${args.nonStoryCommits.length ? generateCommitList(args.nonStoryCommits) : "No commits."}

${signatureIfNeeded(args.signature)}
  `.trim();
};

const generateFromStories = ({
  projectId,
  title,
  stories,
  warningText = "",
  isLight,
}: {
  projectId: string;
  title: string;
  stories: Story[];
  warningText?: string;
  isLight: boolean;
}): string => {
  let text = `## ${title} (${stories.length})\n`;

  if (stories.length === 0) {
    text += "No stories.";
  } else {
    if (warningText) {
      text += `${warningText}\n`;
    }

    text += stories
      .map((story) => {
        const header = createTitle({ projectId, story, isLight });
        const commitList = isLight ? "" : `\n${generateCommitList(story.commits)}`;
        return `${header}${commitList}`;
      })
      .join("\n");
  }

  return `${text}\n\n${SPACER}`;
};

const createTitle = ({ projectId, story, isLight }: { projectId: string; story: Story; isLight: boolean }) => {
  const prefix = isLight ? "-" : "####";
  const icon = story.storyType !== "Chore" ? `${getStoryIcon(story.storyType)} ` : "";
  const url = createUrl(projectId, story.id);
  const notFinishedForChore = story.storyType === "Chore" && story.status !== "Accepted" ? " (Not finished)" : "";

  return `${prefix} ${icon}[${story.title}](${url})${notFinishedForChore}`;
};

const generateCommitList = (commits: GitCommit[]): string => {
  return commits.map((commit) => `- ${commit.message} ${commit.shortHash}`).join("\n");
};

const signatureIfNeeded = (signature: boolean): string => {
  if (!signature) return "";
  return "---\n*Generated by [tb-changelog](https://github.com/Bekind-Labs/tb-changelog)*";
};
